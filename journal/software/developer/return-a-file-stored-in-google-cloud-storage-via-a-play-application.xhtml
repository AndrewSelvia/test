<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xml:lang="en" lang="en">
<head>
  <link rel="stylesheet" type="text/css" href="/assets/stylesheets/main.css" media="all" />
  <meta charset="utf-8" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/atom-one-light.min.css" rel="stylesheet" type="text/css" media="(prefers-color-scheme: light)" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/atom-one-dark.min.css" rel="stylesheet" type="text/css" media="(prefers-color-scheme: dark)" />
  <script src="/assets/highlight/highlight.pack.js"></script>
  <script>hljs.initHighlightingOnLoad();</script>
  <!--  https://webkit.org/blog/7929/designing-websites-for-iphone-x/-->
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <!--  <link rel="mask-icon" href="/assets/images/mask-icon.svg" color="#888888">-->
  <!--  &lt;!&ndash;  https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html&ndash;&gt;-->
  <!--  <link rel="apple-touch-icon" href="/assets/images/apple-touch-icon.png">-->
  <!--  <meta name="apple-mobile-web-app-title" content="Journal">-->

  <!--  https://realfavicongenerator.net/favicon_result?file_id=p1efrjt5m7hi5281ag1mm616uv6#.Xzknii9h0UE-->
  <link rel="apple-touch-icon" sizes="180x180" href="/assets/favicon/apple-touch-icon.png" />
  <link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon/favicon-16x16.png" />
  <!--  <link rel="manifest" href="/site.webmanifest">-->
  <link rel="mask-icon" href="/assets/favicon/safari-pinned-tab.svg" color="#888888" />
  <meta name="apple-mobile-web-app-title" content="Journal" />
  <meta name="application-name" content="Journal" />
  <!--  <meta name="msapplication-TileColor" content="#da532c">-->

  <title>Return a File Stored in Google Cloud Storage via a Play Application</title>
</head>
<body>
  <div class="content" id="main">
    <div class="row">
      <svg:svg class="openbtn" id="icon" onclick="window.location.href='/'" width="34px" height="38px">
        <svg:defs>
          <svg:linearGradient id="header-shape-gradient" gradientTransform="rotate(90)">
            <svg:stop offset="0%" stop-color="var(--color-red)"/>
            <svg:stop offset="20%" stop-color="var(--color-orange)"/>
            <svg:stop offset="40%" stop-color="var(--color-yellow)"/>
            <svg:stop offset="60%" stop-color="var(--color-green)"/>
            <svg:stop offset="80%" stop-color="var(--color-blue)"/>
            <svg:stop offset="100%" stop-color="var(--color-indigo)"/>
          </svg:linearGradient>
        </svg:defs>
        <svg:title>Open root</svg:title>
        <svg:use href="/assets/images/icons/Journal.svg#icon"/>
      </svg:svg>
      <ul class="breadcrumb nav-list">
        <li class="level1 breadcrumb"><a href="../../index.xhtml">Journal</a></li>
        <li class="level1 breadcrumb"><a href="../index.xhtml">Software</a></li>
        <li id="parent" class="level1 breadcrumb"><a href="index.xhtml">Developer</a></li>
      </ul>
    </div>
    <h1 id="return-a-file-stored-in-google-cloud-storage-via-a-play-application" class="title">
      <a href="#return-a-file-stored-in-google-cloud-storage-via-a-play-application">Return a File Stored in Google Cloud Storage via a Play Application</a>
    </h1>
    <p>The <a href="https://doc.akka.io/docs/alpakka/current/google-cloud-storage.html">Google Cloud Storage (GCS) Alpakka connector</a> streamlines the process of interacting with the GCS API for Scala applications. <a href="https://doc.akka.io/docs/alpakka/current/index.html">Alpakka</a> is built atop <a href="https://doc.akka.io/docs/akka/current/stream/index.html">Akka Streams</a> to expose stream-aware interfaces to many popular APIs. The GCS connector handles authentication and API interaction so your app can remain focused on its core business logic.</p>
    <p>While the documentation provides a good start, complete integration with Play requires a bit more care. Here are a few things to keep in mind:</p>
    <ul>
      <li>The HOCON definition of <code>privateKey</code> seems to only work as a single-line string, despite the documentation <a href="https://github.com/akka/alpakka/blob/5dab46011b5b66e8a6c3499d0d617e6721c70888/google-cloud-storage/src/test/resources/application.conf#L12-L28">defining it as a multi-line string</a>. Obviously, this could easily be the result of user error.</li>
      <li>As of the time of this writing, explicit dependencies on version 10.1.12 of <code>akka-http</code> &amp; <code>akka-http-spray-json</code> must be declared to work with Play version 2.8.2.</li>
      <li>
        <p>You will need to inject an actor system &amp; declare an implicit materializer into the controller, for instance like this:</p>
        <pre class="keep-together pdf epub"><code class="scala">@Singleton
class YourController @Inject()
(val controllerComponents: ControllerComponents, actorSystem: ActorSystem)
(implicit materializer: Materializer = SystemMaterializer(actorSystem).materializer)
extends BaseController {}</code></pre>
      </li>
      <li>If the controller&#39;s action was previously synchronous, you will need to modify it to be asynchronous to account for the streaming nature of <code>GCStorage.download</code>; specifically, it should become <code>Action.async</code>.</li>
      <li>
        <p>The return type of <code>GCStorage.download</code> is difficult to navigate for those new to Akka Streams. The following is one way to map it to an <code>Ok</code> response in Play:</p>
        <pre><code class="scala">GCStorage
        .download(&quot;my-bucket&quot;, fileName)
        .map(
          _
            .map(
              _
                .map(_.utf8String)
                .fold(&quot;&quot;)(_ + _)
                .map(Ok(_))
                .map(_.as(&quot;text/html&quot;))
                .runWith(Sink.head))
            .get)
        .runWith(Sink.head)
        .flatten</code></pre>
      </li>
    </ul>
    <p>For more details on how to use Akka Streams, refer to the <a href="https://doc.akka.io/docs/akka/current/stream/stream-quickstart.html">Streams Quickstart Guide</a>.</p>
    
  </div>
</body>
</html>
