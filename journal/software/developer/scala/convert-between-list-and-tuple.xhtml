<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xml:lang="en" lang="en">
<head>
  <link rel="stylesheet" type="text/css" href="/assets/stylesheets/main.css" media="all" />
  <meta charset="utf-8" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/atom-one-light.min.css" rel="stylesheet" type="text/css" media="(prefers-color-scheme: light)" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/atom-one-dark.min.css" rel="stylesheet" type="text/css" media="(prefers-color-scheme: dark)" />
  <script src="/assets/highlight/highlight.pack.js"></script>
  <script>hljs.initHighlightingOnLoad();</script>
  <!--  https://webkit.org/blog/7929/designing-websites-for-iphone-x/-->
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <!--  <link rel="mask-icon" href="/assets/images/mask-icon.svg" color="#888888">-->
  <!--  &lt;!&ndash;  https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html&ndash;&gt;-->
  <!--  <link rel="apple-touch-icon" href="/assets/images/apple-touch-icon.png">-->
  <!--  <meta name="apple-mobile-web-app-title" content="Journal">-->

  <!--  https://realfavicongenerator.net/favicon_result?file_id=p1efrjt5m7hi5281ag1mm616uv6#.Xzknii9h0UE-->
  <link rel="apple-touch-icon" sizes="180x180" href="/assets/favicon/apple-touch-icon.png" />
  <link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon/favicon-16x16.png" />
  <!--  <link rel="manifest" href="/site.webmanifest">-->
  <link rel="mask-icon" href="/assets/favicon/safari-pinned-tab.svg" color="#888888" />
  <meta name="apple-mobile-web-app-title" content="Journal" />
  <meta name="application-name" content="Journal" />
  <!--  <meta name="msapplication-TileColor" content="#da532c">-->

  <title>Convert Between List and Tuple</title>
</head>
<body>
  <div class="content" id="main">
    <div class="row">
      <svg:svg class="openbtn" id="icon" onclick="window.location.href='/'" width="34px" height="38px">
        <svg:defs>
          <svg:linearGradient id="header-shape-gradient" gradientTransform="rotate(90)">
            <svg:stop offset="0%" stop-color="var(--color-red)"/>
            <svg:stop offset="20%" stop-color="var(--color-orange)"/>
            <svg:stop offset="40%" stop-color="var(--color-yellow)"/>
            <svg:stop offset="60%" stop-color="var(--color-green)"/>
            <svg:stop offset="80%" stop-color="var(--color-blue)"/>
            <svg:stop offset="100%" stop-color="var(--color-indigo)"/>
          </svg:linearGradient>
        </svg:defs>
        <svg:title>Open root</svg:title>
        <svg:use href="/assets/images/icons/Journal.svg#icon"/>
      </svg:svg>
      <ul class="breadcrumb nav-list">
        <li class="level1 breadcrumb"><a href="../../../index.xhtml">Journal</a></li>
        <li class="level1 breadcrumb"><a href="../../index.xhtml">Software</a></li>
        <li class="level1 breadcrumb"><a href="../index.xhtml">Developer</a></li>
        <li id="parent" class="level1 breadcrumb"><a href="index.xhtml">Scala</a></li>
      </ul>
    </div>
    <h1 id="convert-between-list-and-tuple" class="title">
      <a href="#convert-between-list-and-tuple">Convert Between List and Tuple</a>
    </h1>
    <p>Imagine you have an array of values which are sequenced appropriately for use as the parameter list to a function. Rather than explicitly placing the item at each index into the parameter list, wouldn&#39;t it be nice to just pass the array itself in as the parameter list? If you&#39;ve ever encountered a situation like this, you are likely aware that it&#39;s not quite so simple. This document aims to centralize some tips for deciding what to do. For additional details, refer to <a href="https://www.lorrin.org/blog/2011/10/04/scalas-missing-splat-operator/">this helpful guide</a>.</p>
    <p>The key things you need to know are:</p>
    <ul>
      <li>
        To pass a list into a parameter list that ends with a variadic parameter, use the splat operator (<code>:_*</code>):
        <pre class="keep-together pdf epub"><code class="scala">def sum(integers: Int*) = (0 /: integers) (_ + _)
val parameters = List(1, 2, 3, 4)
sum(parameters:_*)</code></pre>
      </li>
      <li>
        To pass a tuple into a fixed-arity parameter list, use <code>tupled</code>:
        <pre class="keep-together pdf epub"><code class="scala">def multiply(x: Int, y: Double) = x * y
val parameters = (6, 7.0)
multiply _ tupled parameters</code></pre>
      </li>
      <li>
        To pass a list into a fixed-arity parameter list, you need to use shapeless as shown in <a href="https://stackoverflow.com/a/14727987/6073927">this Stack Overflow answer</a>:
        <pre class="keep-together pdf epub"><code class="scala">import shapeless._
import syntax.std.traversable._
val integers = List(1, 2, 3)
val integersHList = integers.toHList[Int::Int::Int::HNil]
val integersTuple = integersHList.get.tupled</code></pre>
      </li>
    </ul>
    <h2 id="shapeless" class="section">
      <a href="#shapeless">Shapeless</a>
    </h2>
    <p>For a relatively gentle introduction on how to use Shapeless, refer to <a href="https://jto.github.io/articles/getting-started-with-shapeless/">this article</a>. Additional details can be found in <a href="https://github.com/milessabin/shapeless/wiki/Feature-overview:-shapeless-2.0.0">its official documentation</a>. The following list highlights some strategies which have proven useful in the past:</p>
    <ul>
      <li><a href="https://github.com/milessabin/shapeless/wiki/Feature-overview:-shapeless-2.0.0#hlist-style-operations-on-standard-scala-tuples">Operate on tuples as you do with standard <code>List</code>s</a></li>
    </ul>
    
  </div>
</body>
</html>
