<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xml:lang="en" lang="en">
<head>
  <link rel="stylesheet" type="text/css" href="/assets/stylesheets/main.css" media="all" />
  <meta charset="utf-8" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/atom-one-light.min.css" rel="stylesheet" type="text/css" media="(prefers-color-scheme: light)" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/atom-one-dark.min.css" rel="stylesheet" type="text/css" media="(prefers-color-scheme: dark)" />
  <script src="/assets/highlight/highlight.pack.js"></script>
  <script>hljs.initHighlightingOnLoad();</script>
  <!--  https://webkit.org/blog/7929/designing-websites-for-iphone-x/-->
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <!--  <link rel="mask-icon" href="/assets/images/mask-icon.svg" color="#888888">-->
  <!--  &lt;!&ndash;  https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html&ndash;&gt;-->
  <!--  <link rel="apple-touch-icon" href="/assets/images/apple-touch-icon.png">-->
  <!--  <meta name="apple-mobile-web-app-title" content="Journal">-->

  <!--  https://realfavicongenerator.net/favicon_result?file_id=p1efrjt5m7hi5281ag1mm616uv6#.Xzknii9h0UE-->
  <link rel="apple-touch-icon" sizes="180x180" href="/assets/favicon/apple-touch-icon.png" />
  <link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon/favicon-16x16.png" />
  <!--  <link rel="manifest" href="/site.webmanifest">-->
  <link rel="mask-icon" href="/assets/favicon/safari-pinned-tab.svg" color="#888888" />
  <meta name="apple-mobile-web-app-title" content="Journal" />
  <meta name="application-name" content="Journal" />
  <!--  <meta name="msapplication-TileColor" content="#da532c">-->
  <meta name="theme-color" content="#ffffff" />

  <title>Plugins</title>
</head>
<body>
  <div class="content" id="main">
    <div class="row">
      <svg:svg class="openbtn" id="icon" onclick="window.location.href='/'" width="34px" height="38px">
        <svg:defs>
          <svg:linearGradient id="header-shape-gradient" gradientTransform="rotate(90)">
            <svg:stop offset="0%" stop-color="var(--color-red)"/>
            <svg:stop offset="20%" stop-color="var(--color-orange)"/>
            <svg:stop offset="40%" stop-color="var(--color-yellow)"/>
            <svg:stop offset="60%" stop-color="var(--color-green)"/>
            <svg:stop offset="80%" stop-color="var(--color-blue)"/>
            <svg:stop offset="100%" stop-color="var(--color-indigo)"/>
          </svg:linearGradient>
        </svg:defs>
        <svg:title>Open root</svg:title>
        <svg:use href="/assets/images/icons/Journal.svg#icon"/>
      </svg:svg>
      <ul class="breadcrumb nav-list">
        <li class="level1 breadcrumb"><a href="../../../index.xhtml">Journal</a></li>
        <li class="level1 breadcrumb"><a href="../../index.xhtml">Software</a></li>
        <li class="level1 breadcrumb"><a href="../index.xhtml">Developer</a></li>
        <li id="parent" class="level1 breadcrumb"><a href="index.xhtml">SBT</a></li>
      </ul>
    </div>
    <h1 id="plugins" class="title">
      <a href="#plugins">Plugins</a>
    </h1>
    <h2 id="popular-plugins" class="section">
      <a href="#popular-plugins">Popular Plugins</a>
    </h2>
    <p>If you are searching for interesting plugins, refer to <a href="https://tech.malliina.com/useful-sbt-plugins">this article</a> for some suggestions. The list below also collects some popular ones:</p>
    <ul>
      <li><a href="https://github.com/sbt/sbt-native-packager">sbt-native-packager</a>: Build application packages in native formats; for instance, you can package a command-line interface (CLI) as an executable program</li>
      <li><a href="https://github.com/sbt/sbt-assembly">sbt-assembly</a>: Deploy fat JARs</li>
      <li><a href="https://github.com/marcuslonnberg/sbt-docker">sbt-docker</a>: Create Docker images directly from sbt</li>
      <li><a href="https://scalameta.org/scalafmt/">scalafmt</a>: Code formatter for Scala</li>
      <li><a href="https://scalameta.org/mdoc/">mdoc</a>: Typechecked markdown documentation for Scala</li>
      <li><a href="https://github.com/sbt/sbt-buildinfo">sbt-buildinfo</a>: Generates a Scala object with SBT build parameters so you can use them in your code</li>
    </ul>
    <h2 id="create-a-plugin" class="section">
      <a href="#create-a-plugin">Create a Plugin</a>
    </h2>
    <p>If you are planning to create your own SBT plugin, refer to the following resources:</p>
    <ul>
      <li><a href="https://www.scala-sbt.org/1.x/docs/Plugins.html">Plugins</a></li>
      <li><a href="https://www.scala-sbt.org/1.x/docs/Plugins-Best-Practices.html">Plugins Best Practices</a></li>
      <li><a href="https://www.scala-sbt.org/1.x/docs/Tasks.html">Tasks</a></li>
      <li><a href="https://codewithstyle.info/how-to-build-a-simple-sbt-plugin/">How to Build and Deploy a Simple SBT Plugin</a></li>
      <li><a href="https://leobenkel.com/2018/11/make-sbt-plugin/">SBT Plugin â€“ How to make it, debug it, improve it?</a></li>
      <li><a href="https://timushev.com/posts/2020/04/25/building-and-testing-sbt-plugins/">Building and testing sbt plugins</a></li>
    </ul>
    <p>If you plan to have your SBT plugin call a shell script internally, refer to <a href="https://stackoverflow.com/a/12875270/6073927">this Stack Overflow answer</a>. Remember that your plugin will be imported into client projects as a jar file, therefore task definitions in your plugin won&#39;t be able to simply call the shell script directly. Instead, your plugin should store the shell script in <code>src/main/resources</code>. By storing it there, it will be accessible on the resource path of the client project at runtime. Your plugin can define a task to copy the contents of the resource, write them to a temporary file (perhaps the client project&#39;s <code>target</code> directory), make it executable, and finally run the script (refer to <a href="../scala/execute-shell-commands-from-scala-code.xhtml"><em>Execute Shell Commands from Scala Code</em></a>).</p>
    
  </div>
</body>
</html>
